sensorLeftPort = 1
sensorRightPort = 2
sensorFrontPort = 3
sensorColorPort = 4

motorLeftPort = "B"
motorRightPort = "C"

pi = 3.14

wheelR = 28
distMult = 180 / (pi * wheelR)

turnBigCircle = 205 * pi / 2
turnSmallCircle = 95 * pi / 2

turnTank = 25 * pi

centerDistance = 30
betweenCellsDistance = 150
calibrateDistance = 60

speed = 60

Function printSensors(in number left, in number front, in number right, in number color, in number leftEncoder, in number rightEncoder)
  LCD.Clear()
  LCD.Text(1, 10, 10, 2, "L")
  LCD.Text(1, 30, 10, 2, "F")
  LCD.Text(1, 50, 10, 2, "R")
  LCD.Text(1, 70, 10, 2, "C")
  LCD.Text(1, 10, 30, 2, left)
  LCD.Text(1, 30, 30, 2, front)
  LCD.Text(1, 50, 30, 2, right)
  LCD.Text(1, 70, 30, 2, color)
  
  LCD.Text(1, 10, 50, 2, "LE")
  LCD.Text(1, 10, 70, 2, "RE")
  LCD.Text(1, 50, 50, 2, leftEncoder)
  LCD.Text(1, 50, 70, 2, rightEncoder)
EndFunction

Function monitorVars(in number val1, in number val2, in number val3)
  LCD.Clear()
  LCD.Text(1, 10, 10, 2, val1)
  LCD.Text(1, 10, 30, 2, val2)
  LCD.Text(1, 10, 50, 2, val3)
EndFunction

Function readSensorSm(in number port, out number sensorValue)
  val = Sensor.ReadRaw(port, 1)
  sensorValue = val[0] / 10
EndFunction

Function isWall(in number dist, out number found)
  If dist < 25 Then
    found = 1
  Else
    found = 0
  EndIf
EndFunction

Function moveDistance(in string port, in number target, in number encoder, in number speed)
  If encoder < target Then
    Motor.StartPower(port, speed)
  Else
    Motor.Stop(port, "True")
  EndIf
EndFunction

Function moveDistanceNegative(in string port, in number target, in number encoder, in number speed)
  If encoder > target Then
    Motor.StartPower(port, -speed)
  Else
    Motor.Stop(port, "True")
  EndIf
EndFunction 

Function resetEncoders(in string portLeft, in string portRight)
  Motor.ResetCount(portLeft)
  Motor.ResetCount(portRight)
EndFunction

Function getEncoders(in string portLeft, in string portRight, out number counterLeft, out number counterRight)
  counterLeft = Motor.GetCount(portLeft)
  counterRight = Motor.GetCount(portRight)
EndFunction

Function calcErrorSensors(in number refSensor, out number error)
  sensorLeftPort = 1
  sensorRightPort = 2
  isLeftWall = 0
  leftDist = 0
  isRightWall = 0
  rightDist = 0
  readSensorSm(sensorLeftPort, leftDist)
  readSensorSm(sensorRightPort, rightDist)
  isWall(leftDist, isLeftWall)
  isWall(rightDist, isRightWall)
  leftError = leftDist - refSensor
  rightError = rightDist - refSensor
  if isLeftWall = 1 and isRightWall = 1 Then
    error = leftError - rightError
  ElseIf isLeftWall = 1 Then
    error = 2 * leftError
  ElseIf isRightWall = 1 Then
    error = -2 * rightError
  EndIf
  LCD.Clear()
  LCD.Text(1, 50, 30, 2, leftDist)
  LCD.Text(1, 50, 50, 2, rightDist)
  LCD.Text(1, 50, 70, 2, error)
EndFunction

Function calcErrorForward(in number encoderLeft, in number encoderRight, in number speed, in number refSensor, out number speedLeft, out number speedRight)
  kpEnc = 1
  kpSens = 3
  diff = (encoderLeft - encoderRight)
  sensorError = 0
  if refSensor > 0 Then
    calcErrorSensors(refSensor, sensorError)
  EndIf
  speedLeft = speed - diff - sensorError * kpSens
  speedRight = speed + diff + sensorError * kpSens
  if speedLeft < 0 Then
    speedLeft = 1
  EndIf
  if speedRight < 0 Then
    speedRight = 1
  EndIf
EndFunction

Function calcErrorCurve(in number encoderLeft, in number encoderRight, in number targetRatio, in number speed, out number speedLeft, out number speedRight)
  if encoderRight = 0 Then
    diff = 0
  Else
    curRatio = encoderLeft / encoderRight  
    if curRatio < 0 Then
      curRatio = curRatio * - 1
    EndIf
    diff = (curRatio - targetRatio) * 25
  EndIf
  speedLeft = speed
  speedRight = speed
  if targetRatio > 1 Then
    speedRight = speed / targetRatio
  ElseIf targetRatio < 1 Then
    speedLeft = speed * targetRatio
  EndIf
  speedLeft -= diff
  speedRight += diff
  if speedLeft < 0 Then
    speedLeft = 1
  EndIf
  if speedRight < 0 Then
    speedRight = 1
  EndIf
  LCD.Clear()
  LCD.Text(1, 50, 30, 2, encoderLeft)
  LCD.Text(1, 50, 50, 2, encoderRight)
  LCD.Text(1, 50, 70, 2, targetRatio)
EndFunction

Function forward(in string portLeft, in string portRight, in number distanceLeft, in number distanceRight, in number mult, in number speed, in number refSensor)
  targetLeft = distanceLeft * mult
  targetRight = distanceRight * mult
  encoderLeft = 0
  encoderRight = 0
  speedLeft = 0
  speedRight = 0
  resetEncoders(portLeft, portRight)
  While encoderLeft < targetLeft and encoderRight < targetRight
    getEncoders(portLeft, portRight, encoderLeft, encoderRight)
    if distanceLeft = distanceRight Then
      calcErrorForward(encoderLeft, encoderRight, speed, refSensor, speedLeft, speedRight)
    Else
      calcErrorCurve(encoderLeft, encoderRight, targetLeft / targetRight, speed, speedLeft, speedRight)
    EndIf
    moveDistance(portLeft, targetLeft, encoderLeft, speedLeft)
    moveDistance(portRight, targetRight, encoderRight, speedRight)
    Program.Delay(10)
  EndWhile
  Motor.Stop(portLeft + portRight, "True")
EndFunction

Function backward(in string portLeft, in string portRight, in number distanceLeft, in number distanceRight, in number mult, in number speed)
  targetLeft = -1 * (distanceLeft * mult)
  targetRight = -1 * (distanceRight * mult)
  encodersRatio = 1
  encoderLeft = 0
  encoderRight = 0
  resetEncoders(portLeft, portRight)
  While encoderLeft > targetLeft or encoderRight > targetRight
    getEncoders(portLeft, portRight, encoderLeft, encoderRight)
    moveDistanceNegative(portLeft, targetLeft, encoderLeft, speed)
    moveDistanceNegative(portRight, targetRight, encoderRight, speed)
    Program.Delay(10)
  EndWhile
  Motor.Stop(portLeft + portRight, "True")
EndFunction

Function moveCenter(in string portLeft, in string portRight, in number distance, in number mult, in number speed, in number refSensor)
  forward(portLeft, portRight, distance, distance, mult, speed, refSensor)  
EndFunction

Function moveBetweenCells(in string portLeft, in string portRight, in number distance, in number mult, in number speed, in number refSensor)
  forward(portLeft, portRight, distance, distance, mult, speed, refSensor)
EndFunction

Function turnLeft(in string portLeft, in string portRight, in number bigCircle, in number smallCircle, in number mult, in number speed)
  forward(portLeft, portRight, smallCircle, bigCircle, mult, speed, 0)
EndFunction

Function turnRight(in string portLeft, in string portRight, in number bigCircle, in number smallCircle, in number mult, in number speed)
  forward(portLeft, portRight, bigCircle, smallCircle, mult, speed, 0)
EndFunction

Function turnLeftTank(in string portLeft, in string portRight, in number distance, in number mult, in number speed)
  target = distance * mult
  targetLeft = -1 * target
  targetRight = target
  encodersRatio = 1
  encoderLeft = 0
  encoderRight = 0
  speedLeft = 0
  speedRight = 0
  resetEncoders(portLeft, portRight)
  While encoderLeft > -target or encoderRight < target
    getEncoders(portLeft, portRight, encoderLeft, encoderRight)
    calcErrorForward(-1 * encoderLeft, encoderRight, speed, 0, speedLeft, speedRight)
    moveDistanceNegative(portLeft, targetLeft, encoderLeft, speedLeft)
    moveDistance(portRight, targetRight, encoderRight, speedRight)
    Program.Delay(10)
  EndWhile
  Motor.Stop(portLeft + portRight, "True")
EndFunction

Function turnRightTank(in string portLeft, in string portRight, in number distance, in number mult, in number speed)
  target = distance * mult
  targetRight = -1 * target
  targetLeft = target
  encodersRatio = 1
  encoderLeft = 0
  encoderRight = 0
  speedLeft = 0
  speedRight = 0
  resetEncoders(portLeft, portRight)
  While encoderLeft < target or encoderRight > -target
    getEncoders(portLeft, portRight, encoderLeft, encoderRight)
    calcErrorForward(encoderLeft, -1 * encoderRight, speed, 0, speedLeft, speedRight)
    monitorVars(encoderLeft, encoderRight, speedRight)
    moveDistance(portLeft, targetLeft, encoderLeft, speedLeft)
    moveDistanceNegative(portRight, targetRight, encoderRight, speedRight)
    Program.Delay(20)
  EndWhile
  Motor.Stop(portLeft + portRight, "True")
EndFunction

Function print(in number value)
  LCD.Clear()
  LCD.Write(20, 40, value)
EndFunction

Function getRefSensors(in number portLeft, in number portRight, out number refSensor)
  distLeft = 0
  distRight = 0
  While distLeft = 0 or distRight = 0
    readSensorSm(portLeft, distLeft)
    readSensorSm(portRight, distRight)
  EndWhile
  refSensor = (distLeft + distRight) / 2
  Program.Delay(5000)
EndFunction

Function isLine(in number port, out number found)
  threshold = 15
  val = Sensor.ReadRaw(port, 1)
  if val[0] < threshold Then
    found = 1
  Else
    found = 0
  EndIf
EndFunction

Function monitor(in number sensorLeftPort, in number sensorRightPort, in number sensorFrontPort, in number sensorColorPort, in string motorLeftPort, in string motorRightPort)
  While 1 = 1
    isLeftWall = 0
    isRightWall = 0
    isFrontWall = 0
    isLineFound = 0
    leftEncoder = 0
    rightEncoder = 0
    isWall(sensorLeftPort, isLeftWall)
    isWall(sensorRightPort, isRightWall)
    isWall(sensorFrontPort, isFrontWall)
    isLine(sensorColorPort, isLineFound)
    getEncoders(motorLeftPort, motorRightPort, leftEncoder, rightEncoder)
    printSensors(isLeftWall, isFrontWall, isRightWall, isLineFound, leftEncoder, rightEncoder)
    Program.Delay(100)
  EndWhile
EndFunction

Function setBetweenCells(out number betweenCells)
  if betweenCells = 0 Then
    betweenCells = 1
  Else
    betweenCells = 0
  EndIf
EndFunction

refSensors = 0
getRefSensors(sensorLeftPort, sensorRightPort, refSensors)

betweenCells = 0
' Робот стартует около стенки
moveCenter(motorLeftPort, motorRightPort, centerDistance, distMult, speed, refSensors)
While "True"
  isLeftWall = 0
  leftDist = 0
  isRightWall = 0
  rightDist = 0
  isFrontWall = 0
  frontDist = 0
  isLineFound = 0
  leftEncoder = 0
  rightEncoder = 0
  readSensorSm(sensorLeftPort, leftDist)
  readSensorSm(sensorRightPort, rightDist)
  readSensorSm(sensorFrontPort, frontDist)
  isWall(leftDist, isLeftWall)
  isWall(rightDist, isRightWall)
  isWall(frontDist, isFrontWall)
  isLine(sensorColorPort, isLineFound)
  if isRightWall = 1 and isFrontWall = 0 Then
    moveBetweenCells(motorLeftPort, motorRightPort, betweenCellsDistance, distMult, speed, refSensors)
    setBetweenCells(betweenCells)
  ElseIf isRightWall = 0 Then
    if betweenCells = 1 Then
      turnRight(motorLeftPort, motorRightPort, turnBigCircle, turnSmallCircle, distMult, speed)
    Else
      turnRightTank(motorLeftPort, motorRightPort, turnTank, distMult, speed)
      if isLeftWall = 1 Then
        backward(motorLeftPort, motorRightPort, calibrateDistance, calibrateDistance, distMult, speed)
        moveCenter(motorLeftPort, motorRightPort, centerDistance + 20, distMult, speed, refSensors)
      EndIf
      moveBetweenCells(motorLeftPort, motorRightPort, betweenCellsDistance, distMult, speed, refSensors)
      setBetweenCells(betweenCells)
    EndIf
  ElseIf isLeftWall = 0 Then
    if betweenCells = 1 Then
      turnLeft(motorLeftPort, motorRightPort, turnBigCircle, turnSmallCircle, distMult, speed)
    Else
      turnLeftTank(motorLeftPort, motorRightPort, turnTank, distMult, speed)
      if isRightWall = 1 Then
        backward(motorLeftPort, motorRightPort, calibrateDistance, calibrateDistance, distMult, speed)
        moveCenter(motorLeftPort, motorRightPort, centerDistance + 20, distMult, speed, refSensors)
      EndIf
    EndIf
  ElseIf isFrontWall = 1 and isLeftWall = 1 and isRightWall = 1 Then
    if betweenCells = 1 Then
      moveBetweenCells(motorLeftPort, motorRightPort, betweenCellsDistance, distMult, speed, refSensors)
      setBetweenCells(betweenCells)
    else
      turnLeftTank(motorLeftPort, motorRightPort, turnTank, distMult, speed)
      turnLeftTank(motorLeftPort, motorRightPort, turnTank, distMult, speed)
      backward(motorLeftPort, motorRightPort, calibrateDistance, calibrateDistance, distMult, speed)
      moveCenter(motorLeftPort, motorRightPort, centerDistance + 20, distMult, speed, refSensors)
    EndIf
  EndIf
EndWhile
'moveCenter(motorLeftPort, motorRightPort, centerDistance, distMult, speed)


'turnRight(motorLeftPort, motorRightPort, turnBigCircle, turnSmallCircle, distMult, speed)
'moveBetweenCells(motorLeftPort, motorRightPort, betweenCellsDistance, distMult, speed)
'
'backward(motorLeftPort, motorRightPort, calibrateDistance, calibrateDistance, distMult, speed)
'moveCenter(motorLeftPort, motorRightPort, centerDistance, distMult, speed)
'turnLeftTank(motorLeftPort, motorRightPort, turnTank, distMult, speed)
'backward(motorLeftPort, motorRightPort, calibrateDistance, calibrateDistance, distMult, speed)
'moveCenter(motorLeftPort, motorRightPort, centerDistance, distMult, speed)
'moveBetweenCells(motorLeftPort, motorRightPort, betweenCellsDistance, distMult, speed)
'moveBetweenCells(motorLeftPort, motorRightPort, betweenCellsDistance, distMult, speed)
'moveBetweenCells(motorLeftPort, motorRightPort, betweenCellsDistance, distMult, speed)
'monitorVars(turnTank, distMult, turnTank * distMult)
'monitor(sensorLeftPort, sensorRightPort, sensorFrontPort, sensorColorPort, motorLeftPort, motorRightPort)